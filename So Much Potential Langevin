import numpy as np 
from matplotlib import pyplot as plt
from scipy.interpolate import InterpolatedUnivariateSpline

### create an array pf 20 bond lentghs spanning 0.5 - 3.5 angstroms
### but store in atomic units of lentgh... note 1 angstrom = 1.88973 a.u. of length
r_array = np.linspace(0.561,3.087,20)*1.88973
print(r_array)

###fill in this array with your actual energy values... there should be 20 values in total!!!
Bondlength_array = [0.944865,1.24324342,1.54162184,1.84000026,2.13837868,
                    2.43675711,2.73513553,3.03351395,3.33189237,3.63027079,
                    3.92864921,4.22702763,4.52540605,4.82378447,5.12216289,
                    5.42054132,5.71891974,6.01729816,6.31567658,6.614055]


E_array = [-107.1389493226,-110.8762342308,-112.2035650482,-112.6221628016,-112.6993448642,
          -112.6532021548,-112.5695515418,-112.4825450847,-112.4093307577,-112.3611216888,
           -112.332870603,-112.3154788092,-112.3040496673,-112.0685479896,-112.2907699794,
           -112.28692262280,-112.0012243902,-111.9483767861,-111.9274012790,-112.2798664306]

# TO see the plot of the PES, uncomment the following lines
plt.plot(Bondlength_array, E_array, 'red')
plt.plot(Bondlength_array, E_array, label = "Energy")
plt.plot(Bondlength_array, E_array, 'r*')

plt.xlabel('Bond Length')
plt.ylabel('Energy')
plt.title('Bond Length vs Energy')

plt.legend()
plt.show()

## use cubic spline interpolation 
order = 3
### form the interpolar object for the data
sE = InterpolatedUnivariateSpline(r_array, E_array, k=order)
### form a much finer grid
r_fine = np.linspace(1.06,5.0,200)
### compute the interpolated/extrapolated values for E on this grid
E_fine = sE(r_fine)
### plot the interpolated data 
plt.title('Estimated Potential')
plt.plot(r_fine, E_fine, 'blue')
plt.plot(r_fine, E_fine, label = 'Potential Estimation')
plt.xlabel('Spanning')
plt.ylabel('Estimated Potential')
plt.plot(r_fine, E_fine, 'b*' )
plt.legend()
plt.show()

###take the derivative of potential
fE = sE.derivative()
###force is the negative of the derivative
F_fine = -1*fE(r_fine)
### plot the forces
plt.title('Bond Length vs Force' )
plt.xlabel('Bond Length')
plt.ylabel('Force')
plt.plot(r_fine, np.abs(F_fine), 'y*')
plt.legend()
plt.xlim(1,5)
plt.show()

### Find index of the PES where it has its global minimum
r_eq_idx = np.argmin(E_fine)
###find the value of the separation corresponding to that index
r_eq = r_fine[r_eq_idx]
### print equilibrium bond-length in atomic units and in angstroms
print("Equilibrium bond length is ",r_eq," atomic units")
print("Equilibrium bond length is ",r_eq*0.529,"Angstroms")
### get second derivative of potential energy curve... recall that we fit a spline to
### to the first derivative already and called that spline function fE.
cE = fE.derivative()
### evaluate the second derivative at r_eq to get k
k = cE(r_eq)
### define reduced mass of CO as m_C * m_O /(m_C + m_O) where mass is in atomic units (electron mass = 1)
mu = 13625.
### define "ground-state" velocity:
v = np.sqrt( np.sqrt(k/mu)/(2*mu))
### get random position and velocity for CO within a reasonable range
r_init = np.random.uniform(0.75*r_eq,2*r_eq)
v_init = np.random.uniform(-2*v,2*v)
### print initial position and velocity
print("Initial separation is ",r_init, "atomic units")
print("Initial velocity is ",v_init, "atomic units")
### establish time-step for integration to be 0.2 atomic units... this is about 0.01 femtoseconds
dt = 0.02
### get force on particle
F_init = -1*fE(r_init)
### parameters for Langevin Equation: temperature and drag
### note that in atomic units, the Boltzmann constant is unity
temperature = 0.00026 # boiling point of CO in atomic units
gamma = 0.01;
### use parameters set above the get inital perturbation of force for Langevin dynamics
rp_init = np.sqrt(2*temperature*gamma*mu/dt)*np.random.normal(0,1)
def BBK(r_curr, v_curr, rp_curr, gamma_val, temperature_val, mu, f_interp, dt):
    
### get acceleration at current time: (force + current perturbation on force)/mass - drag
a_curr = (-1*f_interp(r_curr) + rp_curr)/mu - gamma_val*v_curr
### The above is equation 6 in the assignment DAS posted
### update velocity for half time step, for such a small time step can approximate dv = adt
### THINK ABOUT IT: DO YOU REALLY HAVE TO DO THIS STEP?
### use current acceleration and velocity to update position
### WRITE CODE IMPLEMENTING THE FORMULA YOU OBTAINED, AS PART OF EXERCISE 1, FOR r(t+dt) HERE

    
### calculate the rp_future
    
rp_fut = np.sqrt(2*temperature_val*gamma_val*mu/dt)*np.random.normal(0,1)
    
### use rp_fut to get future acceleration a_fut (a_tilde at the future time in the assignment), 
### note that we cannot take future drag into account as we have not calculated our future velocity yet
### CODE IMPLEMENTING EQUATION 7 IN THE ASSIGNMENT DAS POSTED GOES HERE
    
### use current and future acceleration to get future velocity v_fut
### note that we have to "correct" our formula relative to the formula for velocity Verlet
### as we have not included our future drag in our future acceleration
    
# v_fut = (v_halftime + 0.5*a_fut*dt)/(1+0.5*gamma_val*dt)
### WRITE CODE IMPLEMENTING THE FORMULA YOU OBTAINED, AS PART OF EXERCISE 1, FOR r(t+dt) HERE
    
result = [r_fut, v_fut, rp_fut]
    
return result
