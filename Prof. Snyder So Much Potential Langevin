import numpy as np 
from matplotlib import pyplot as plt
from scipy.interpolate import InterpolatedUnivariateSpline


r_array = np.linspace(0.561,3.087,20)*1.88973
print(r_array)


Bondlength_array = [0.944865,1.24324342,1.54162184,1.84000026,2.13837868,
                    2.43675711,2.73513553,3.03351395,3.33189237,3.63027079,
                    3.92864921,4.22702763,4.52540605,4.82378447,5.12216289,
                    5.42054132,5.71891974,6.01729816,6.31567658,6.614055]


E_array = [-107.1389493226,-110.8762342308,-112.2035650482,-112.6221628016,-112.6993448642,
          -112.6532021548,-112.5695515418,-112.4825450847,-112.4093307577,-112.3611216888,
           -112.332870603,-112.3154788092,-112.3040496673,-112.0685479896,-112.2907699794,
           -112.28692262280,-112.0012243902,-111.9483767861,-111.9274012790,-112.2798664306]


plt.plot(Bondlength_array, E_array, 'red')
plt.plot(Bondlength_array, E_array, label = "Energy")
plt.plot(Bondlength_array, E_array, 'r*')

plt.xlabel('Bond Length')
plt.ylabel('Energy')
plt.title('Bond Length vs Energy')

plt.legend()
plt.show()


order = 3

sE = InterpolatedUnivariateSpline(r_array, E_array, k=order)

r_fine = np.linspace(1.06,5.0,200)

E_fine = sE(r_fine)

plt.title('Estimated Potential')
plt.plot(r_fine, E_fine, 'blue')
plt.plot(r_fine, E_fine, label = 'Potential Estimation')
plt.xlabel('Spanning')
plt.ylabel('Estimated Potential')
plt.plot(r_fine, E_fine, 'b*' )
plt.legend()
plt.show()

minE = min(E_fine)

fE = sE.derivative()

F_fine = -1*fE(r_fine)

plt.title('Bond Length vs Force' )
plt.xlabel('Bond Length')
plt.ylabel('Force')
plt.plot(r_fine, np.abs(F_fine), 'y*')
plt.legend()
plt.xlim(1,5)
plt.show()


r_eq_idx = np.argmin(E_fine)

r_eq = r_fine[r_eq_idx]

print("Equilibrium bond length is ",r_eq," atomic units")
print("Equilibrium bond length is ",r_eq*0.529,"Angstroms")

cE = fE.derivative()

k = cE(r_eq)

mu = 13625.

v = np.sqrt( np.sqrt(k/mu)/(2*mu))

r_init = np.random.uniform(0.75*r_eq,2*r_eq)
v_init = np.random.uniform(-2*v,2*v)

print("Initial separation is ",r_init, "atomic units")
print("Initial velocity is ",v_init, "atomic units")

dt = 0.02

F_init = -1*fE(r_init)

temperature = 0.00026 # boiling point of CO in atomic units
gamma = 0.01;

rp_init = np.sqrt(2*temperature*gamma*mu/dt)*np.random.normal(0,1)

def BBK(r_curr, v_curr, rp_curr, gamma_val, temperature_val, mu, f_interp, dt):
    

    a_curr = (-1*f_interp(r_curr) + rp_curr)/mu - gamma_val*v_curr
    r_fut = r_curr + v_curr * dt/2
    v_fut = (v_curr + (a_curr*dt)/2 *dt )/ (1 + gamma_val)

    rp_fut = np.sqrt(2*temperature_val*gamma_val*mu/dt)*np.random.normal(0,1)
    
    result = [r_fut, v_fut, rp_fut]
    return result

N_updates = 200000

r_vs_t = np.zeros(N_updates)
v_vs_t = np.zeros(N_updates)
e_vs_t = np.zeros(N_updates)
t_array = np.zeros(N_updates)

r_vs_t[0] = r_init
v_vs_t[0] = v_init
e_vs_t[0] = (sE(r_init)-minE)+0.5*mu*v_init**2

result_array = BBK(r_init, v_init, rp_init, gamma, temperature, mu, fE, dt )

for i in range(1,N_updates):
    tmp = BBK(result_array[0], result_array[1], result_array[2], gamma, temperature, mu, fE, dt )
    result_array = tmp
    t_array[i] = dt*i
    r_vs_t[i] = result_array[0]
    v_vs_t[i] = result_array[1]
    e_vs_t[i] = (sE(result_array[0])-minE)+0.5*mu*v_init**2
    
plt.plot (t_array, r_vs_t, 'red')
plt.show()

plt.plot(mu*v_vs_t, r_vs_t, 'blue')
plt.show()

plt.plot(t_array,e_vs_t,'magenta')
plt.show()

print("Mean Energy for next to last 100000 time steps of the trajectory is ",np.mean(e_vs_t[(N_updates-20000):(N_updates-10000)])," Hartrees")
print("Mean Energy for last 100000 time steps of the trajectory is ",np.mean(e_vs_t[(N_updates-10000):N_updates])," Hartrees")
